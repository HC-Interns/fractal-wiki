{
  # This is a holochain scaffold yaml definition. http://ceptr.org/projects/holochain

  # DNA File Version
  # Version indicator for changes to DNA
  "Version": "0.0.1",
  "Generator": "hc-scaffold:0.1.0+06aba91",

  # Application DNA
  # The DNA specifies the entry structure and functions and configuration of your application
  "DNA": {

    # DNA File Version
    # Version indicator for changes to DNA
    "Version": 1,

    # DNA Unique ID
    # This ID differentiates your app from others. For example, to tell one Slack team from another which same code.
    "UUID": "1f1e032a-a6ce-426d-aab0-22a9ae407bff",

    # Application Name
    # What would you like to call your holochain app?
    "Name": "HoloWiki",

    # Properties
    # Properties that you want available across all Zomes.
    "Properties": {

      # Application Description
      # Briefly describe your holochain app.
      "description": "fractal wiki on holochain",

      # Language
      # The base (human) language of this holochain app.
      "language": "en"
    },

    # Properties Schema File
    # Describes the entries in the Properties section of your dna file.
    "PropertiesSchemaFile": "properties_schema.json",

    # DHT Settings
    # Configure the properties of your Distributed Hash Table (e.g. hash algorithm, neighborhood size, etc.).
    "DHTConfig": {
      "HashType": "sha2-256"
    },

    # Zomes
    # List the Zomes your application will support.
    "Zomes": [
      {

        # Zome Name
        # The name of this code module.
        "Name": "anchor",

        # Zome Description
        # What is the purpose of this module?
        "Description": "Easy to find, fixed hash linking to a hash of card",

        # Ribosome Type
        # What scripting language will you code in?
        "RibosomeType": "js",

        # Code File
        # Points to the main script file for this Zome.
        "CodeFile": "anchor.js",

        # Zome Entries
        # Data stored and tracked by your Zome.
        "Entries": [
          {
            "Name": "anchor", # The name of this entry.
            "Required": true, # Is this entry required?
            "DataFormat": "json", # What type of data should this entry store?
            "Sharing": "public", # Should this entry be publicly accessible?
            "Schema": "{\n  \"title\": \"Anchor Schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"anchorType\": {\n      \"type\": \"string\"\n    },\n    \"anchorText\": {\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\n    \"anchorType\"\n  ]\n}",
            "_": "-"
          },
          {
            "Name": "anchor_link", # The name of this entry.
            "Required": true, # Is this entry required?
            "DataFormat": "links", # What type of data should this entry store?
            "Sharing": "public", # Should this entry be publicly accessible?
            "_": "-"
          }
        ],

        # Zome Functions
        # Functions which can be called in your Zome's API.
        "Functions": [
          {
            "Name": "getAnchors", # The name of this function.
            "CallingType": "string", # Data format for parameters passed to this function.
            "Exposure": "public", # Level to which is this function exposed.
          },
          {
            "Name": "isExists", # The name of this function.
            "CallingType": "json", # Data format for parameters passed to this function.
            "Exposure": "", # Level to which is this function exposed.
          },
          {
            "Name": "anchor", # The name of this function.
            "CallingType": "json", # Data format for parameters passed to this function.
            "Exposure": "", # Level to which is this function exposed.
          }
        ],

        # Zome Source Code
        # The logic that will control Zome behavior
        "Code": "'use strict';\n\n// -----------------------------------------------------------------\n//  This stub Zome code file was auto-generated by hc-scaffold\n// -----------------------------------------------------------------\n\n// -----------------------------------------------------------------\n//  Exposed functions with custom logic https://developer.holochain.org/API_reference\n// -----------------------------------------------------------------\n\nfunction getAnchors (text) {\n  // your custom code here\n  return \"a string\";\n}\n\nfunction isExists (params) {\n  // your custom code here\n  return {};\n}\n\nfunction anchor (params) {\n  // your custom code here\n  return {};\n}\n\n\n// -----------------------------------------------------------------\n//  The Genesis Function https://developer.holochain.org/genesis\n// -----------------------------------------------------------------\n\n/**\n * Called only when your source chain is generated\n * @return {boolean} success\n */\nfunction genesis () {\n  return true;\n}\n\n// -----------------------------------------------------------------\n//  Validation functions for every change to the local chain or DHT\n// -----------------------------------------------------------------\n\n/**\n * Called to validate any changes to the local chain or DHT\n * @param {string} entryName - the type of entry\n * @param {*} entry - the entry data to be set\n * @param {object} header - header for the entry containing properties EntryLink, Time, and Type\n * @param {*} pkg - the extra data provided by the validate[X]Pkg methods\n * @param {object} sources - an array of strings containing the keys of any authors of this entry\n * @return {boolean} is valid?\n */\nfunction validateCommit (entryName, entry, header, pkg, sources) {\n  switch (entryName) {\n    case \"anchor\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"anchor_link\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    default:\n      // invalid entry name\n      return false;\n  }\n}\n\n/**\n * Called to validate any changes to the local chain or DHT\n * @param {string} entryName - the type of entry\n * @param {*} entry - the entry data to be set\n * @param {object} header - header for the entry containing properties EntryLink, Time, and Type\n * @param {*} pkg - the extra data provided by the validate[X]Pkg methods\n * @param {object} sources - an array of strings containing the keys of any authors of this entry\n * @return {boolean} is valid?\n */\nfunction validatePut (entryName, entry, header, pkg, sources) {\n  switch (entryName) {\n    case \"anchor\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"anchor_link\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    default:\n      // invalid entry name\n      return false;\n  }\n}\n\n/**\n * Called to validate any changes to the local chain or DHT\n * @param {string} entryName - the type of entry\n * @param {*} entry - the entry data to be set\n * @param {object} header - header for the entry containing properties EntryLink, Time, and Type\n * @param {string} replaces - the hash for the entry being updated\n * @param {*} pkg - the extra data provided by the validate[X]Pkg methods\n * @param {object} sources - an array of strings containing the keys of any authors of this entry\n * @return {boolean} is valid?\n */\nfunction validateMod (entryName, entry, header, replaces, pkg, sources) {\n  switch (entryName) {\n    case \"anchor\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"anchor_link\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    default:\n      // invalid entry name\n      return false;\n  }\n}\n\n/**\n * Called to validate any changes to the local chain or DHT\n * @param {string} entryName - the type of entry\n * @param {string} hash - the hash of the entry to remove\n * @param {*} pkg - the extra data provided by the validate[X]Pkg methods\n * @param {object} sources - an array of strings containing the keys of any authors of this entry\n * @return {boolean} is valid?\n */\nfunction validateDel (entryName, hash, pkg, sources) {\n  switch (entryName) {\n    case \"anchor\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"anchor_link\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    default:\n      // invalid entry name\n      return false;\n  }\n}\n\n/**\n * Called to validate any changes to the local chain or DHT\n * @param {string} entryName - the type of entry\n * @param {string} baseHash - the hash of the base entry being linked\n * @param {?} links - ?\n * @param {*} pkg - the extra data provided by the validate[X]Pkg methods\n * @param {object} sources - an array of strings containing the keys of any authors of this entry\n * @return {boolean} is valid?\n */\nfunction validateLink (entryName, baseHash, links, pkg, sources) {\n  switch (entryName) {\n    case \"anchor\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"anchor_link\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    default:\n      // invalid entry name\n      return false;\n  }\n}\n\n/**\n * Called to get the data needed to validate\n * @param {string} entryName - the name of entry to validate\n * @return {*} the data required for validation\n */\nfunction validatePutPkg (entryName) {\n  return null;\n}\n\n/**\n * Called to get the data needed to validate\n * @param {string} entryName - the name of entry to validate\n * @return {*} the data required for validation\n */\nfunction validateModPkg (entryName) {\n  return null;\n}\n\n/**\n * Called to get the data needed to validate\n * @param {string} entryName - the name of entry to validate\n * @return {*} the data required for validation\n */\nfunction validateDelPkg (entryName) {\n  return null;\n}\n\n/**\n * Called to get the data needed to validate\n * @param {string} entryName - the name of entry to validate\n * @return {*} the data required for validation\n */\nfunction validateLinkPkg (entryName) {\n  return null;\n}"
      },
      {

        # Zome Name
        # The name of this code module.
        "Name": "card",

        # Zome Description
        # What is the purpose of this module?
        "Description": "wiki card for a certain topic",

        # Ribosome Type
        # What scripting language will you code in?
        "RibosomeType": "js",

        # Code File
        # Points to the main script file for this Zome.
        "CodeFile": "card.js",

        # Zome Entries
        # Data stored and tracked by your Zome.
        "Entries": [
          {
            "Name": "card", # The name of this entry.
            "Required": true, # Is this entry required?
            "DataFormat": "json", # What type of data should this entry store?
            "Sharing": "public", # Should this entry be publicly accessible?
            "Schema": "{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"id\": \"http://example.com/card/card.json\",\n  \"type\": \"object\",\n  \"required\": [\n    \"title\",\n    \"source\",\n    \"content\",\n    \"timestamp\",\n    \"card_type\"\n  ],\n  \"properties\": {\n    \"title\": {\n      \"type\": \"string\"\n    },\n    \"source\": {\n      \"type\": \"string\"\n    },\n    \"content\": {\n      \"type\": \"string\"\n    },\n    \"timestamp\": {\n      \"type\": \"integer\"\n    },\n    \"like\": {\n      \"default\": 0,\n      \"type\": \"integer\"\n    },\n    \"dislike\": {\n      \"default\": 0,\n      \"type\": \"integer\"\n    },\n    \"card_type\": {\n      \"type\": \"string\"\n    }\n  }\n}",
            "_": "crud"
          },
          {
            "Name": "tree_link", # The name of this entry.
            "Required": true, # Is this entry required?
            "DataFormat": "links", # What type of data should this entry store?
            "Sharing": "public", # Should this entry be publicly accessible?
            "_": "-"
          }
        ],

        # Zome Functions
        # Functions which can be called in your Zome's API.
        "Functions": [
          {
            "Name": "cardCreate", # The name of this function.
            "CallingType": "json", # Data format for parameters passed to this function.
            "Exposure": "public", # Level to which is this function exposed.
            "_": "c:card"
          },
          {
            "Name": "cardRead", # The name of this function.
            "CallingType": "json", # Data format for parameters passed to this function.
            "Exposure": "public", # Level to which is this function exposed.
            "_": "r:card"
          },
          {
            "Name": "cardUpdate", # The name of this function.
            "CallingType": "json", # Data format for parameters passed to this function.
            "Exposure": "public", # Level to which is this function exposed.
            "_": "u:card"
          },
          {
            "Name": "cardDelete", # The name of this function.
            "CallingType": "json", # Data format for parameters passed to this function.
            "Exposure": "public", # Level to which is this function exposed.
            "_": "d:card"
          },
          {
            "Name": "addTreeNode", # The name of this function.
            "CallingType": "json", # Data format for parameters passed to this function.
            "Exposure": "public", # Level to which is this function exposed.
          }
        ],

        # Zome Source Code
        # The logic that will control Zome behavior
        "Code": "'use strict';\n\n// -----------------------------------------------------------------\n//  This stub Zome code file was auto-generated by hc-scaffold\n// -----------------------------------------------------------------\n\n// -----------------------------------------------------------------\n//  Exposed functions with custom logic https://developer.holochain.org/API_reference\n// -----------------------------------------------------------------\n\nfunction cardCreate (cardEntry) {\n  var cardHash = commit(\"card\", cardEntry);\n  return cardHash;\n}\n\nfunction cardRead (cardHash) {\n  var card = get(cardHash);\n  return card;\n}\n\nfunction cardUpdate (cardHash) {\n  var sampleValue={\"title\":\"a string\",\"source\":\"a string\",\"content\":\"a string\",\"timestamp\":0,\"like\":0,\"dislike\":0,\"card_type\":\"a string\",\"extraField\":true};\n  var cardOutHash = update(\"card\", sampleValue, cardHash);\n  return cardOutHash;\n}\n\nfunction cardDelete (cardHash) {\n  var result = remove(cardHash, \"\");\n  return result;\n}\n\nfunction addTreeNode (params) {\n  // your custom code here\n  return {};\n}\n\n\n// -----------------------------------------------------------------\n//  The Genesis Function https://developer.holochain.org/genesis\n// -----------------------------------------------------------------\n\n/**\n * Called only when your source chain is generated\n * @return {boolean} success\n */\nfunction genesis () {\n  return true;\n}\n\n// -----------------------------------------------------------------\n//  Validation functions for every change to the local chain or DHT\n// -----------------------------------------------------------------\n\n/**\n * Called to validate any changes to the local chain or DHT\n * @param {string} entryName - the type of entry\n * @param {*} entry - the entry data to be set\n * @param {object} header - header for the entry containing properties EntryLink, Time, and Type\n * @param {*} pkg - the extra data provided by the validate[X]Pkg methods\n * @param {object} sources - an array of strings containing the keys of any authors of this entry\n * @return {boolean} is valid?\n */\nfunction validateCommit (entryName, entry, header, pkg, sources) {\n  switch (entryName) {\n    case \"card\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"tree_link\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    default:\n      // invalid entry name\n      return false;\n  }\n}\n\n/**\n * Called to validate any changes to the local chain or DHT\n * @param {string} entryName - the type of entry\n * @param {*} entry - the entry data to be set\n * @param {object} header - header for the entry containing properties EntryLink, Time, and Type\n * @param {*} pkg - the extra data provided by the validate[X]Pkg methods\n * @param {object} sources - an array of strings containing the keys of any authors of this entry\n * @return {boolean} is valid?\n */\nfunction validatePut (entryName, entry, header, pkg, sources) {\n  switch (entryName) {\n    case \"card\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"tree_link\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    default:\n      // invalid entry name\n      return false;\n  }\n}\n\n/**\n * Called to validate any changes to the local chain or DHT\n * @param {string} entryName - the type of entry\n * @param {*} entry - the entry data to be set\n * @param {object} header - header for the entry containing properties EntryLink, Time, and Type\n * @param {string} replaces - the hash for the entry being updated\n * @param {*} pkg - the extra data provided by the validate[X]Pkg methods\n * @param {object} sources - an array of strings containing the keys of any authors of this entry\n * @return {boolean} is valid?\n */\nfunction validateMod (entryName, entry, header, replaces, pkg, sources) {\n  switch (entryName) {\n    case \"card\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"tree_link\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    default:\n      // invalid entry name\n      return false;\n  }\n}\n\n/**\n * Called to validate any changes to the local chain or DHT\n * @param {string} entryName - the type of entry\n * @param {string} hash - the hash of the entry to remove\n * @param {*} pkg - the extra data provided by the validate[X]Pkg methods\n * @param {object} sources - an array of strings containing the keys of any authors of this entry\n * @return {boolean} is valid?\n */\nfunction validateDel (entryName, hash, pkg, sources) {\n  switch (entryName) {\n    case \"card\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"tree_link\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    default:\n      // invalid entry name\n      return false;\n  }\n}\n\n/**\n * Called to validate any changes to the local chain or DHT\n * @param {string} entryName - the type of entry\n * @param {string} baseHash - the hash of the base entry being linked\n * @param {?} links - ?\n * @param {*} pkg - the extra data provided by the validate[X]Pkg methods\n * @param {object} sources - an array of strings containing the keys of any authors of this entry\n * @return {boolean} is valid?\n */\nfunction validateLink (entryName, baseHash, links, pkg, sources) {\n  switch (entryName) {\n    case \"card\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"tree_link\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    default:\n      // invalid entry name\n      return false;\n  }\n}\n\n/**\n * Called to get the data needed to validate\n * @param {string} entryName - the name of entry to validate\n * @return {*} the data required for validation\n */\nfunction validatePutPkg (entryName) {\n  return null;\n}\n\n/**\n * Called to get the data needed to validate\n * @param {string} entryName - the name of entry to validate\n * @return {*} the data required for validation\n */\nfunction validateModPkg (entryName) {\n  return null;\n}\n\n/**\n * Called to get the data needed to validate\n * @param {string} entryName - the name of entry to validate\n * @return {*} the data required for validation\n */\nfunction validateDelPkg (entryName) {\n  return null;\n}\n\n/**\n * Called to get the data needed to validate\n * @param {string} entryName - the name of entry to validate\n * @return {*} the data required for validation\n */\nfunction validateLinkPkg (entryName) {\n  return null;\n}"
      },
      {

        # Zome Name
        # The name of this code module.
        "Name": "Tree",

        # Zome Description
        # What is the purpose of this module?
        "Description": "Maintain the structure of the whole blog",

        # Ribosome Type
        # What scripting language will you code in?
        "RibosomeType": "js",

        # Code File
        # Points to the main script file for this Zome.
        "CodeFile": "tree.js",

        # Zome Entries
        # Data stored and tracked by your Zome.
        "Entries": [
          {
            "Name": "node", # The name of this entry.
            "Required": true, # Is this entry required?
            "DataFormat": "json", # What type of data should this entry store?
            "Sharing": "public", # Should this entry be publicly accessible?
            "Schema": "{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"id\": \"http://example.com/tree/node.json\",\n  \"type\": \"object\",\n  \"required\": [\n    \"rootId\",\n    \"height\",\n    \"cardId\"\n  ],\n  \"properties\": {\n    \"rootId\": {\n      \"type\": \"string\"\n    },\n    \"height\": {\n      \"type\": \"integer\"\n    },\n    \"cardId\": {\n      \"type\": \"string\"\n    }\n  }\n}",
            "_": "crd"
          },
          {
            "Name": "child_link", # The name of this entry.
            "Required": true, # Is this entry required?
            "DataFormat": "links", # What type of data should this entry store?
            "Sharing": "public", # Should this entry be publicly accessible?
            "_": "-"
          },
          {
            "Name": "card_link", # The name of this entry.
            "Required": true, # Is this entry required?
            "DataFormat": "links", # What type of data should this entry store?
            "Sharing": "public", # Should this entry be publicly accessible?
            "_": "-"
          }
        ],

        # Zome Functions
        # Functions which can be called in your Zome's API.
        "Functions": [
          {
            "Name": "nodeCreate", # The name of this function.
            "CallingType": "json", # Data format for parameters passed to this function.
            "Exposure": "public", # Level to which is this function exposed.
            "_": "c:node"
          },
          {
            "Name": "nodeRead", # The name of this function.
            "CallingType": "json", # Data format for parameters passed to this function.
            "Exposure": "public", # Level to which is this function exposed.
            "_": "r:node"
          },
          {
            "Name": "nodeDelete", # The name of this function.
            "CallingType": "json", # Data format for parameters passed to this function.
            "Exposure": "public", # Level to which is this function exposed.
            "_": "d:node"
          },
          {
            "Name": "getTopics", # The name of this function.
            "CallingType": "json", # Data format for parameters passed to this function.
            "Exposure": "", # Level to which is this function exposed.
          }
        ],

        # Zome Source Code
        # The logic that will control Zome behavior
        "Code": "'use strict';\n\n// -----------------------------------------------------------------\n//  This stub Zome code file was auto-generated by hc-scaffold\n// -----------------------------------------------------------------\n\n// -----------------------------------------------------------------\n//  Exposed functions with custom logic https://developer.holochain.org/API_reference\n// -----------------------------------------------------------------\n\nfunction nodeCreate (nodeEntry) {\n  var nodeHash = commit(\"node\", nodeEntry);\n  return nodeHash;\n}\n\nfunction nodeRead (nodeHash) {\n  var node = get(nodeHash);\n  return node;\n}\n\nfunction nodeDelete (nodeHash) {\n  var result = remove(nodeHash, \"\");\n  return result;\n}\n\nfunction getTopics (params) {\n  // your custom code here\n  return {};\n}\n\n\n// -----------------------------------------------------------------\n//  The Genesis Function https://developer.holochain.org/genesis\n// -----------------------------------------------------------------\n\n/**\n * Called only when your source chain is generated\n * @return {boolean} success\n */\nfunction genesis () {\n  return true;\n}\n\n// -----------------------------------------------------------------\n//  Validation functions for every change to the local chain or DHT\n// -----------------------------------------------------------------\n\n/**\n * Called to validate any changes to the local chain or DHT\n * @param {string} entryName - the type of entry\n * @param {*} entry - the entry data to be set\n * @param {object} header - header for the entry containing properties EntryLink, Time, and Type\n * @param {*} pkg - the extra data provided by the validate[X]Pkg methods\n * @param {object} sources - an array of strings containing the keys of any authors of this entry\n * @return {boolean} is valid?\n */\nfunction validateCommit (entryName, entry, header, pkg, sources) {\n  switch (entryName) {\n    case \"node\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"child_link\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"card_link\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    default:\n      // invalid entry name\n      return false;\n  }\n}\n\n/**\n * Called to validate any changes to the local chain or DHT\n * @param {string} entryName - the type of entry\n * @param {*} entry - the entry data to be set\n * @param {object} header - header for the entry containing properties EntryLink, Time, and Type\n * @param {*} pkg - the extra data provided by the validate[X]Pkg methods\n * @param {object} sources - an array of strings containing the keys of any authors of this entry\n * @return {boolean} is valid?\n */\nfunction validatePut (entryName, entry, header, pkg, sources) {\n  switch (entryName) {\n    case \"node\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"child_link\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"card_link\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    default:\n      // invalid entry name\n      return false;\n  }\n}\n\n/**\n * Called to validate any changes to the local chain or DHT\n * @param {string} entryName - the type of entry\n * @param {*} entry - the entry data to be set\n * @param {object} header - header for the entry containing properties EntryLink, Time, and Type\n * @param {string} replaces - the hash for the entry being updated\n * @param {*} pkg - the extra data provided by the validate[X]Pkg methods\n * @param {object} sources - an array of strings containing the keys of any authors of this entry\n * @return {boolean} is valid?\n */\nfunction validateMod (entryName, entry, header, replaces, pkg, sources) {\n  switch (entryName) {\n    case \"node\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"child_link\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"card_link\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    default:\n      // invalid entry name\n      return false;\n  }\n}\n\n/**\n * Called to validate any changes to the local chain or DHT\n * @param {string} entryName - the type of entry\n * @param {string} hash - the hash of the entry to remove\n * @param {*} pkg - the extra data provided by the validate[X]Pkg methods\n * @param {object} sources - an array of strings containing the keys of any authors of this entry\n * @return {boolean} is valid?\n */\nfunction validateDel (entryName, hash, pkg, sources) {\n  switch (entryName) {\n    case \"node\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"child_link\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"card_link\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    default:\n      // invalid entry name\n      return false;\n  }\n}\n\n/**\n * Called to validate any changes to the local chain or DHT\n * @param {string} entryName - the type of entry\n * @param {string} baseHash - the hash of the base entry being linked\n * @param {?} links - ?\n * @param {*} pkg - the extra data provided by the validate[X]Pkg methods\n * @param {object} sources - an array of strings containing the keys of any authors of this entry\n * @return {boolean} is valid?\n */\nfunction validateLink (entryName, baseHash, links, pkg, sources) {\n  switch (entryName) {\n    case \"node\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"child_link\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"card_link\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    default:\n      // invalid entry name\n      return false;\n  }\n}\n\n/**\n * Called to get the data needed to validate\n * @param {string} entryName - the name of entry to validate\n * @return {*} the data required for validation\n */\nfunction validatePutPkg (entryName) {\n  return null;\n}\n\n/**\n * Called to get the data needed to validate\n * @param {string} entryName - the name of entry to validate\n * @return {*} the data required for validation\n */\nfunction validateModPkg (entryName) {\n  return null;\n}\n\n/**\n * Called to get the data needed to validate\n * @param {string} entryName - the name of entry to validate\n * @return {*} the data required for validation\n */\nfunction validateDelPkg (entryName) {\n  return null;\n}\n\n/**\n * Called to get the data needed to validate\n * @param {string} entryName - the name of entry to validate\n * @return {*} the data required for validation\n */\nfunction validateLinkPkg (entryName) {\n  return null;\n}"
      }
    ]
  },

  # TestSets
  # Auto-Generated test sets for hcdev package
  "TestSets": [
    {

      # Name
      # Name of the Test Set
      "Name": "anchor",
      "TestSet": {
        "Tests": [
          {

            # Convey
            # Description of this test
            "Convey": "auto-generated test for getAnchors",

            # Zome
            # The zome this test is related to
            "Zome": "anchor",

            # Function Name
            # The function to test
            "FnName": "getAnchors",

            # Input
            # Input sent to the function
            "Input": "",

            # Output
            # Output from the function to validate
            "Output": "a string"
          },
          {

            # Convey
            # Description of this test
            "Convey": "auto-generated test for isExists",

            # Zome
            # The zome this test is related to
            "Zome": "anchor",

            # Function Name
            # The function to test
            "FnName": "isExists",

            # Input
            # Input sent to the function
            "Input": "",

            # Output
            # Output from the function to validate
            "Output": {}
          },
          {

            # Convey
            # Description of this test
            "Convey": "auto-generated test for anchor",

            # Zome
            # The zome this test is related to
            "Zome": "anchor",

            # Function Name
            # The function to test
            "FnName": "anchor",

            # Input
            # Input sent to the function
            "Input": "",

            # Output
            # Output from the function to validate
            "Output": {}
          }
        ]
      }
    },
    {

      # Name
      # Name of the Test Set
      "Name": "card",
      "TestSet": {
        "Tests": [
          {

            # Convey
            # Description of this test
            "Convey": "auto-generated test for cardCreate",

            # Zome
            # The zome this test is related to
            "Zome": "card",

            # Function Name
            # The function to test
            "FnName": "cardCreate",

            # Input
            # Input sent to the function
            "Input": {
              "title": "a string",
              "source": "a string",
              "content": "a string",
              "timestamp": 0,
              "like": 0,
              "dislike": 0,
              "card_type": "a string"
            },

            # Output
            # Output from the function to validate
            "Output": "%h%"
          },
          {

            # Convey
            # Description of this test
            "Convey": "auto-generated test for cardRead",

            # Zome
            # The zome this test is related to
            "Zome": "card",

            # Function Name
            # The function to test
            "FnName": "cardRead",

            # Input
            # Input sent to the function
            "Input": "%h%",

            # Output
            # Output from the function to validate
            "Output": {
              "title": "a string",
              "source": "a string",
              "content": "a string",
              "timestamp": 0,
              "like": 0,
              "dislike": 0,
              "card_type": "a string"
            }
          },
          {

            # Convey
            # Description of this test
            "Convey": "auto-generated test for cardUpdate",

            # Zome
            # The zome this test is related to
            "Zome": "card",

            # Function Name
            # The function to test
            "FnName": "cardUpdate",

            # Input
            # Input sent to the function
            "Input": "%h%",

            # Output
            # Output from the function to validate
            "Output": "%h%"
          },
          {

            # Convey
            # Description of this test
            "Convey": "auto-generated test for cardDelete",

            # Zome
            # The zome this test is related to
            "Zome": "card",

            # Function Name
            # The function to test
            "FnName": "cardDelete",

            # Input
            # Input sent to the function
            "Input": "%h%",

            # Output
            # Output from the function to validate
            "Output": "%h%"
          },
          {

            # Convey
            # Description of this test
            "Convey": "auto-generated test for addTreeNode",

            # Zome
            # The zome this test is related to
            "Zome": "card",

            # Function Name
            # The function to test
            "FnName": "addTreeNode",

            # Input
            # Input sent to the function
            "Input": "",

            # Output
            # Output from the function to validate
            "Output": {}
          }
        ]
      }
    },
    {

      # Name
      # Name of the Test Set
      "Name": "Tree",
      "TestSet": {
        "Tests": [
          {

            # Convey
            # Description of this test
            "Convey": "auto-generated test for nodeCreate",

            # Zome
            # The zome this test is related to
            "Zome": "Tree",

            # Function Name
            # The function to test
            "FnName": "nodeCreate",

            # Input
            # Input sent to the function
            "Input": {
              "rootId": "a string",
              "height": 0,
              "cardId": "a string"
            },

            # Output
            # Output from the function to validate
            "Output": "%h%"
          },
          {

            # Convey
            # Description of this test
            "Convey": "auto-generated test for nodeRead",

            # Zome
            # The zome this test is related to
            "Zome": "Tree",

            # Function Name
            # The function to test
            "FnName": "nodeRead",

            # Input
            # Input sent to the function
            "Input": "%h%",

            # Output
            # Output from the function to validate
            "Output": {
              "rootId": "a string",
              "height": 0,
              "cardId": "a string"
            }
          },
          {

            # Convey
            # Description of this test
            "Convey": "auto-generated test for nodeDelete",

            # Zome
            # The zome this test is related to
            "Zome": "Tree",

            # Function Name
            # The function to test
            "FnName": "nodeDelete",

            # Input
            # Input sent to the function
            "Input": "%h%",

            # Output
            # Output from the function to validate
            "Output": "%h%"
          },
          {

            # Convey
            # Description of this test
            "Convey": "auto-generated test for getTopics",

            # Zome
            # The zome this test is related to
            "Zome": "Tree",

            # Function Name
            # The function to test
            "FnName": "getTopics",

            # Input
            # Input sent to the function
            "Input": "",

            # Output
            # Output from the function to validate
            "Output": {}
          }
        ]
      }
    }
  ]
}