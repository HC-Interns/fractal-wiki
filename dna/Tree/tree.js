'use strict';

// Calling across zome functions
function anchor (anchorType, anchorText) {
  return call('anchors', 'anchor', {
    anchorType: anchorType,
    anchorText: anchorText
  }).replace(/"/g, '');
}

function isCardExists(cardId) {
  return call("anchors","isExists", {
    anchorType: 'cardId',
    anchorText: cardId
  });
}

// -----------------------------------------------------------------
//  This stub Zome code file was auto-generated by hc-scaffold
// -----------------------------------------------------------------

// -----------------------------------------------------------------
//  Exposed functions with custom logic https://developer.holochain.org/API_reference
// -----------------------------------------------------------------

function nodeCreate (params) {

  var treeNode = {
    parentId : params.parentHash,
    height : params.height,
    cardTitle : params.cardTitle,
    cardSource: params.cardSource
  }

  var leafHash = commit("node", treeNode)

  // Create the Card Link structure
  var cardId = {
    title : params.cardTitle,
    source: params.cardSource
  }


  var cardLinkHash = ""
  if (isCardExists(JSON.stringify(cardId)) === 'true') {
    // How to get the hash of card here?
    var anchorHash = anchor('cardId', JSON.stringify(cardId))
    var cardHash = call('card', 'getCardByAnchor', anchorHash)

    cardLinkHash = commit("card_link", {
      "Links": [
        {"Base": leafHash, "Link": cardHash, "Tag": 'LEAF_TO_CARD'},
        {"Base": cardHash, "Link": leafHash, "Tag": 'CARD_TO_LEAF'}
      ]
    });
  } else {
    // debug("<Card> doesn't exists")
    cardId.content = " "
    var cardHash = call('card', 'cardCreate', cardId).replace(/"/g, '')
    // debug(cardHash)
    cardLinkHash = commit("card_link", {
      "Links": [
        {"Base": leafHash, "Link": cardHash, "Tag": 'LEAF_TO_CARD'},
        {"Base": cardHash, "Link": leafHash, "Tag": 'CARD_TO_LEAF'}
      ]
    });
    // debug("!!!! add new card with link hash: " + cardLinkHash)
  }
  // Create the Tree link structure
  var treeLinkHash = ""

  if (params.parentId == "" && params.height == "1") {
    debug("A new topic is added")
    var rootHash = anchor("Tree", "Root")
    treeLinkHash = commit("child_link", {
      "Links": [
        {"Base": rootHash, "Link": leafHash, "Tag": 'TO_CHILD'},
        {"Base": leafHash, "Link": rootHash, "Tag": 'TO_PARENT'}
      ]
    });
  } else {
    var parentHash = anchor("Tree", params.parentHash)
    treeLinkHash = commit("child_link", {
      "Links": [
        {"Base": parentHash, "Link": leafHash, "Tag": 'TO_CHILD'},
        {"Base": leafHash, "Link": parentHash, "Tag": 'TO_PARENT'}
      ]
    })
  }

  displayTree()

  return leafHash;
}

function nodeRead (nodeHash) {
  var node = get(nodeHash);
  return node;
}

function nodeDelete (nodeHash) {
  var result = remove(nodeHash, "");
  return result;
}

function getTopics (params) {
  // your custom code here
  return {};
}

function displayTree () {
  var rootHash = anchor("Tree", "Root")
  var links = getLinks(rootHash, 'TO_CHILD', {load: true})
  debug(links.length)
  for (var i = 0; i < links.length; i++) {
    debug(JSON.stringify(links[i]));
  };
}




// -----------------------------------------------------------------
//  The Genesis Function https://developer.holochain.org/genesis
// -----------------------------------------------------------------

/**
 * Called only when your source chain is generated
 * @return {boolean} success
 */
function genesis () {
  // debug("!!! Inside Genesis")
  // now the root hash is the same for different user
  var rootHash = anchor('Tree', 'Root');
  // debug("!!! Create Id for rootHash")
  return true;
}

// -----------------------------------------------------------------
//  Validation functions for every change to the local chain or DHT
// -----------------------------------------------------------------

/**
 * Called to validate any changes to the local chain or DHT
 * @param {string} entryName - the type of entry
 * @param {*} entry - the entry data to be set
 * @param {object} header - header for the entry containing properties EntryLink, Time, and Type
 * @param {*} pkg - the extra data provided by the validate[X]Pkg methods
 * @param {object} sources - an array of strings containing the keys of any authors of this entry
 * @return {boolean} is valid?
 */
function validateCommit (entryName, entry, header, pkg, sources) {
  switch (entryName) {
    case "node":
      // be sure to consider many edge cases for validating
      // do not just flip this to true without considering what that means
      // the action will ONLY be successfull if this returns true, so watch out!
      return true;
    case "child_link":
      // be sure to consider many edge cases for validating
      // do not just flip this to true without considering what that means
      // the action will ONLY be successfull if this returns true, so watch out!
      return true;
    case "card_link":
      // be sure to consider many edge cases for validating
      // do not just flip this to true without considering what that means
      // the action will ONLY be successfull if this returns true, so watch out!
      return true;
    default:
      // invalid entry name
      return true;
  }
}

/**
 * Called to validate any changes to the local chain or DHT
 * @param {string} entryName - the type of entry
 * @param {*} entry - the entry data to be set
 * @param {object} header - header for the entry containing properties EntryLink, Time, and Type
 * @param {*} pkg - the extra data provided by the validate[X]Pkg methods
 * @param {object} sources - an array of strings containing the keys of any authors of this entry
 * @return {boolean} is valid?
 */
function validatePut (entryName, entry, header, pkg, sources) {
  switch (entryName) {
    case "node":
      // be sure to consider many edge cases for validating
      // do not just flip this to true without considering what that means
      // the action will ONLY be successfull if this returns true, so watch out!
      return true;
    case "child_link":
      // be sure to consider many edge cases for validating
      // do not just flip this to true without considering what that means
      // the action will ONLY be successfull if this returns true, so watch out!
      return true;
    case "card_link":
      // be sure to consider many edge cases for validating
      // do not just flip this to true without considering what that means
      // the action will ONLY be successfull if this returns true, so watch out!
      return true;
    default:
      // invalid entry name
      return true;
  }
}

/**
 * Called to validate any changes to the local chain or DHT
 * @param {string} entryName - the type of entry
 * @param {*} entry - the entry data to be set
 * @param {object} header - header for the entry containing properties EntryLink, Time, and Type
 * @param {string} replaces - the hash for the entry being updated
 * @param {*} pkg - the extra data provided by the validate[X]Pkg methods
 * @param {object} sources - an array of strings containing the keys of any authors of this entry
 * @return {boolean} is valid?
 */
function validateMod (entryName, entry, header, replaces, pkg, sources) {
  switch (entryName) {
    case "node":
      // be sure to consider many edge cases for validating
      // do not just flip this to true without considering what that means
      // the action will ONLY be successfull if this returns true, so watch out!
      return true;
    case "child_link":
      // be sure to consider many edge cases for validating
      // do not just flip this to true without considering what that means
      // the action will ONLY be successfull if this returns true, so watch out!
      return true;
    case "card_link":
      // be sure to consider many edge cases for validating
      // do not just flip this to true without considering what that means
      // the action will ONLY be successfull if this returns true, so watch out!
      return true;
    default:
      // invalid entry name
      return true;
  }
}

/**
 * Called to validate any changes to the local chain or DHT
 * @param {string} entryName - the type of entry
 * @param {string} hash - the hash of the entry to remove
 * @param {*} pkg - the extra data provided by the validate[X]Pkg methods
 * @param {object} sources - an array of strings containing the keys of any authors of this entry
 * @return {boolean} is valid?
 */
function validateDel (entryName, hash, pkg, sources) {
  switch (entryName) {
    case "node":
      // be sure to consider many edge cases for validating
      // do not just flip this to true without considering what that means
      // the action will ONLY be successfull if this returns true, so watch out!
      return true;
    case "child_link":
      // be sure to consider many edge cases for validating
      // do not just flip this to true without considering what that means
      // the action will ONLY be successfull if this returns true, so watch out!
      return true;
    case "card_link":
      // be sure to consider many edge cases for validating
      // do not just flip this to true without considering what that means
      // the action will ONLY be successfull if this returns true, so watch out!
      return true;
    default:
      // invalid entry name
      return true;
  }
}

/**
 * Called to validate any changes to the local chain or DHT
 * @param {string} entryName - the type of entry
 * @param {string} baseHash - the hash of the base entry being linked
 * @param {?} links - ?
 * @param {*} pkg - the extra data provided by the validate[X]Pkg methods
 * @param {object} sources - an array of strings containing the keys of any authors of this entry
 * @return {boolean} is valid?
 */
function validateLink (entryName, baseHash, links, pkg, sources) {
  switch (entryName) {
    case "node":
      // be sure to consider many edge cases for validating
      // do not just flip this to true without considering what that means
      // the action will ONLY be successfull if this returns true, so watch out!
      return true;
    case "child_link":
      // be sure to consider many edge cases for validating
      // do not just flip this to true without considering what that means
      // the action will ONLY be successfull if this returns true, so watch out!
      return true;
    case "card_link":
      // be sure to consider many edge cases for validating
      // do not just flip this to true without considering what that means
      // the action will ONLY be successfull if this returns true, so watch out!
      return true;
    default:
      // invalid entry name
      return false;
  }
}

/**
 * Called to get the data needed to validate
 * @param {string} entryName - the name of entry to validate
 * @return {*} the data required for validation
 */
function validatePutPkg (entryName) {
  return null;
}

/**
 * Called to get the data needed to validate
 * @param {string} entryName - the name of entry to validate
 * @return {*} the data required for validation
 */
function validateModPkg (entryName) {
  return null;
}

/**
 * Called to get the data needed to validate
 * @param {string} entryName - the name of entry to validate
 * @return {*} the data required for validation
 */
function validateDelPkg (entryName) {
  return null;
}

/**
 * Called to get the data needed to validate
 * @param {string} entryName - the name of entry to validate
 * @return {*} the data required for validation
 */
function validateLinkPkg (entryName) {
  return null;
}
